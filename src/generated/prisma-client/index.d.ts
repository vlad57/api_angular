// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  episode: (where?: EpisodeWhereInput) => Promise<boolean>;
  film: (where?: FilmWhereInput) => Promise<boolean>;
  filmUser: (where?: FilmUserWhereInput) => Promise<boolean>;
  saison: (where?: SaisonWhereInput) => Promise<boolean>;
  serie: (where?: SerieWhereInput) => Promise<boolean>;
  serieUser: (where?: SerieUserWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  episode: (where: EpisodeWhereUniqueInput) => EpisodePromise;
  episodes: (
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Episode>;
  episodesConnection: (
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EpisodeConnectionPromise;
  film: (where: FilmWhereUniqueInput) => FilmPromise;
  films: (
    args?: {
      where?: FilmWhereInput;
      orderBy?: FilmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Film>;
  filmsConnection: (
    args?: {
      where?: FilmWhereInput;
      orderBy?: FilmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FilmConnectionPromise;
  filmUser: (where: FilmUserWhereUniqueInput) => FilmUserPromise;
  filmUsers: (
    args?: {
      where?: FilmUserWhereInput;
      orderBy?: FilmUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<FilmUser>;
  filmUsersConnection: (
    args?: {
      where?: FilmUserWhereInput;
      orderBy?: FilmUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FilmUserConnectionPromise;
  saison: (where: SaisonWhereUniqueInput) => SaisonPromise;
  saisons: (
    args?: {
      where?: SaisonWhereInput;
      orderBy?: SaisonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Saison>;
  saisonsConnection: (
    args?: {
      where?: SaisonWhereInput;
      orderBy?: SaisonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SaisonConnectionPromise;
  serie: (where: SerieWhereUniqueInput) => SeriePromise;
  series: (
    args?: {
      where?: SerieWhereInput;
      orderBy?: SerieOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Serie>;
  seriesConnection: (
    args?: {
      where?: SerieWhereInput;
      orderBy?: SerieOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SerieConnectionPromise;
  serieUser: (where: SerieUserWhereUniqueInput) => SerieUserPromise;
  serieUsers: (
    args?: {
      where?: SerieUserWhereInput;
      orderBy?: SerieUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SerieUser>;
  serieUsersConnection: (
    args?: {
      where?: SerieUserWhereInput;
      orderBy?: SerieUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SerieUserConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEpisode: (data: EpisodeCreateInput) => EpisodePromise;
  updateEpisode: (
    args: { data: EpisodeUpdateInput; where: EpisodeWhereUniqueInput }
  ) => EpisodePromise;
  updateManyEpisodes: (
    args: { data: EpisodeUpdateManyMutationInput; where?: EpisodeWhereInput }
  ) => BatchPayloadPromise;
  upsertEpisode: (
    args: {
      where: EpisodeWhereUniqueInput;
      create: EpisodeCreateInput;
      update: EpisodeUpdateInput;
    }
  ) => EpisodePromise;
  deleteEpisode: (where: EpisodeWhereUniqueInput) => EpisodePromise;
  deleteManyEpisodes: (where?: EpisodeWhereInput) => BatchPayloadPromise;
  createFilm: (data: FilmCreateInput) => FilmPromise;
  updateFilm: (
    args: { data: FilmUpdateInput; where: FilmWhereUniqueInput }
  ) => FilmPromise;
  updateManyFilms: (
    args: { data: FilmUpdateManyMutationInput; where?: FilmWhereInput }
  ) => BatchPayloadPromise;
  upsertFilm: (
    args: {
      where: FilmWhereUniqueInput;
      create: FilmCreateInput;
      update: FilmUpdateInput;
    }
  ) => FilmPromise;
  deleteFilm: (where: FilmWhereUniqueInput) => FilmPromise;
  deleteManyFilms: (where?: FilmWhereInput) => BatchPayloadPromise;
  createFilmUser: (data: FilmUserCreateInput) => FilmUserPromise;
  updateFilmUser: (
    args: { data: FilmUserUpdateInput; where: FilmUserWhereUniqueInput }
  ) => FilmUserPromise;
  updateManyFilmUsers: (
    args: { data: FilmUserUpdateManyMutationInput; where?: FilmUserWhereInput }
  ) => BatchPayloadPromise;
  upsertFilmUser: (
    args: {
      where: FilmUserWhereUniqueInput;
      create: FilmUserCreateInput;
      update: FilmUserUpdateInput;
    }
  ) => FilmUserPromise;
  deleteFilmUser: (where: FilmUserWhereUniqueInput) => FilmUserPromise;
  deleteManyFilmUsers: (where?: FilmUserWhereInput) => BatchPayloadPromise;
  createSaison: (data: SaisonCreateInput) => SaisonPromise;
  updateSaison: (
    args: { data: SaisonUpdateInput; where: SaisonWhereUniqueInput }
  ) => SaisonPromise;
  updateManySaisons: (
    args: { data: SaisonUpdateManyMutationInput; where?: SaisonWhereInput }
  ) => BatchPayloadPromise;
  upsertSaison: (
    args: {
      where: SaisonWhereUniqueInput;
      create: SaisonCreateInput;
      update: SaisonUpdateInput;
    }
  ) => SaisonPromise;
  deleteSaison: (where: SaisonWhereUniqueInput) => SaisonPromise;
  deleteManySaisons: (where?: SaisonWhereInput) => BatchPayloadPromise;
  createSerie: (data: SerieCreateInput) => SeriePromise;
  updateSerie: (
    args: { data: SerieUpdateInput; where: SerieWhereUniqueInput }
  ) => SeriePromise;
  updateManySeries: (
    args: { data: SerieUpdateManyMutationInput; where?: SerieWhereInput }
  ) => BatchPayloadPromise;
  upsertSerie: (
    args: {
      where: SerieWhereUniqueInput;
      create: SerieCreateInput;
      update: SerieUpdateInput;
    }
  ) => SeriePromise;
  deleteSerie: (where: SerieWhereUniqueInput) => SeriePromise;
  deleteManySeries: (where?: SerieWhereInput) => BatchPayloadPromise;
  createSerieUser: (data: SerieUserCreateInput) => SerieUserPromise;
  updateSerieUser: (
    args: { data: SerieUserUpdateInput; where: SerieUserWhereUniqueInput }
  ) => SerieUserPromise;
  updateManySerieUsers: (
    args: {
      data: SerieUserUpdateManyMutationInput;
      where?: SerieUserWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSerieUser: (
    args: {
      where: SerieUserWhereUniqueInput;
      create: SerieUserCreateInput;
      update: SerieUserUpdateInput;
    }
  ) => SerieUserPromise;
  deleteSerieUser: (where: SerieUserWhereUniqueInput) => SerieUserPromise;
  deleteManySerieUsers: (where?: SerieUserWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  episode: (
    where?: EpisodeSubscriptionWhereInput
  ) => EpisodeSubscriptionPayloadSubscription;
  film: (
    where?: FilmSubscriptionWhereInput
  ) => FilmSubscriptionPayloadSubscription;
  filmUser: (
    where?: FilmUserSubscriptionWhereInput
  ) => FilmUserSubscriptionPayloadSubscription;
  saison: (
    where?: SaisonSubscriptionWhereInput
  ) => SaisonSubscriptionPayloadSubscription;
  serie: (
    where?: SerieSubscriptionWhereInput
  ) => SerieSubscriptionPayloadSubscription;
  serieUser: (
    where?: SerieUserSubscriptionWhereInput
  ) => SerieUserSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SaisonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EpisodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FilmOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "description_ASC"
  | "description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SerieUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "finish_ASC"
  | "finish_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FilmUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "finish_ASC"
  | "finish_DESC"
  | "progress_ASC"
  | "progress_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SerieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "description_ASC"
  | "description_DESC"
  | "nbEp_ASC"
  | "nbEp_DESC"
  | "nbSais_ASC"
  | "nbSais_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "username_ASC"
  | "username_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EpisodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SaisonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  serie?: SerieWhereInput;
  episodes_every?: EpisodeWhereInput;
  episodes_some?: EpisodeWhereInput;
  episodes_none?: EpisodeWhereInput;
  AND?: SaisonWhereInput[] | SaisonWhereInput;
  OR?: SaisonWhereInput[] | SaisonWhereInput;
  NOT?: SaisonWhereInput[] | SaisonWhereInput;
}

export interface SerieWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  nbEp?: String;
  nbEp_not?: String;
  nbEp_in?: String[] | String;
  nbEp_not_in?: String[] | String;
  nbEp_lt?: String;
  nbEp_lte?: String;
  nbEp_gt?: String;
  nbEp_gte?: String;
  nbEp_contains?: String;
  nbEp_not_contains?: String;
  nbEp_starts_with?: String;
  nbEp_not_starts_with?: String;
  nbEp_ends_with?: String;
  nbEp_not_ends_with?: String;
  nbSais?: String;
  nbSais_not?: String;
  nbSais_in?: String[] | String;
  nbSais_not_in?: String[] | String;
  nbSais_lt?: String;
  nbSais_lte?: String;
  nbSais_gt?: String;
  nbSais_gte?: String;
  nbSais_contains?: String;
  nbSais_not_contains?: String;
  nbSais_starts_with?: String;
  nbSais_not_starts_with?: String;
  nbSais_ends_with?: String;
  nbSais_not_ends_with?: String;
  saisons_every?: SaisonWhereInput;
  saisons_some?: SaisonWhereInput;
  saisons_none?: SaisonWhereInput;
  episodes_every?: EpisodeWhereInput;
  episodes_some?: EpisodeWhereInput;
  episodes_none?: EpisodeWhereInput;
  AND?: SerieWhereInput[] | SerieWhereInput;
  OR?: SerieWhereInput[] | SerieWhereInput;
  NOT?: SerieWhereInput[] | SerieWhereInput;
}

export interface EpisodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  saison?: SaisonWhereInput;
  serie?: SerieWhereInput;
  AND?: EpisodeWhereInput[] | EpisodeWhereInput;
  OR?: EpisodeWhereInput[] | EpisodeWhereInput;
  NOT?: EpisodeWhereInput[] | EpisodeWhereInput;
}

export type FilmWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FilmWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  duration?: String;
  duration_not?: String;
  duration_in?: String[] | String;
  duration_not_in?: String[] | String;
  duration_lt?: String;
  duration_lte?: String;
  duration_gt?: String;
  duration_gte?: String;
  duration_contains?: String;
  duration_not_contains?: String;
  duration_starts_with?: String;
  duration_not_starts_with?: String;
  duration_ends_with?: String;
  duration_not_ends_with?: String;
  AND?: FilmWhereInput[] | FilmWhereInput;
  OR?: FilmWhereInput[] | FilmWhereInput;
  NOT?: FilmWhereInput[] | FilmWhereInput;
}

export type FilmUserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SerieUserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  finish?: Boolean;
  finish_not?: Boolean;
  serie?: SerieWhereInput;
  user?: UserWhereInput;
  AND?: SerieUserWhereInput[] | SerieUserWhereInput;
  OR?: SerieUserWhereInput[] | SerieUserWhereInput;
  NOT?: SerieUserWhereInput[] | SerieUserWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  serie_every?: SerieUserWhereInput;
  serie_some?: SerieUserWhereInput;
  serie_none?: SerieUserWhereInput;
  film_every?: FilmUserWhereInput;
  film_some?: FilmUserWhereInput;
  film_none?: FilmUserWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FilmUserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  finish?: Boolean;
  finish_not?: Boolean;
  progress?: String;
  progress_not?: String;
  progress_in?: String[] | String;
  progress_not_in?: String[] | String;
  progress_lt?: String;
  progress_lte?: String;
  progress_gt?: String;
  progress_gte?: String;
  progress_contains?: String;
  progress_not_contains?: String;
  progress_starts_with?: String;
  progress_not_starts_with?: String;
  progress_ends_with?: String;
  progress_not_ends_with?: String;
  film?: FilmWhereInput;
  user?: UserWhereInput;
  AND?: FilmUserWhereInput[] | FilmUserWhereInput;
  OR?: FilmUserWhereInput[] | FilmUserWhereInput;
  NOT?: FilmUserWhereInput[] | FilmUserWhereInput;
}

export type SaisonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SerieWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SerieUserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface EpisodeCreateInput {
  name: String;
  description: String;
  saison: SaisonCreateOneWithoutEpisodesInput;
  serie: SerieCreateOneWithoutEpisodesInput;
}

export interface SaisonCreateOneWithoutEpisodesInput {
  create?: SaisonCreateWithoutEpisodesInput;
  connect?: SaisonWhereUniqueInput;
}

export interface SaisonCreateWithoutEpisodesInput {
  number: String;
  serie: SerieCreateOneWithoutSaisonsInput;
}

export interface SerieCreateOneWithoutSaisonsInput {
  create?: SerieCreateWithoutSaisonsInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieCreateWithoutSaisonsInput {
  name: String;
  genre: String;
  description: String;
  nbEp: String;
  nbSais: String;
  episodes?: EpisodeCreateManyWithoutSerieInput;
}

export interface EpisodeCreateManyWithoutSerieInput {
  create?: EpisodeCreateWithoutSerieInput[] | EpisodeCreateWithoutSerieInput;
  connect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
}

export interface EpisodeCreateWithoutSerieInput {
  name: String;
  description: String;
  saison: SaisonCreateOneWithoutEpisodesInput;
}

export interface SerieCreateOneWithoutEpisodesInput {
  create?: SerieCreateWithoutEpisodesInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieCreateWithoutEpisodesInput {
  name: String;
  genre: String;
  description: String;
  nbEp: String;
  nbSais: String;
  saisons?: SaisonCreateManyWithoutSerieInput;
}

export interface SaisonCreateManyWithoutSerieInput {
  create?: SaisonCreateWithoutSerieInput[] | SaisonCreateWithoutSerieInput;
  connect?: SaisonWhereUniqueInput[] | SaisonWhereUniqueInput;
}

export interface SaisonCreateWithoutSerieInput {
  number: String;
  episodes?: EpisodeCreateManyWithoutSaisonInput;
}

export interface EpisodeCreateManyWithoutSaisonInput {
  create?: EpisodeCreateWithoutSaisonInput[] | EpisodeCreateWithoutSaisonInput;
  connect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
}

export interface EpisodeCreateWithoutSaisonInput {
  name: String;
  description: String;
  serie: SerieCreateOneWithoutEpisodesInput;
}

export interface EpisodeUpdateInput {
  name?: String;
  description?: String;
  saison?: SaisonUpdateOneRequiredWithoutEpisodesInput;
  serie?: SerieUpdateOneRequiredWithoutEpisodesInput;
}

export interface SaisonUpdateOneRequiredWithoutEpisodesInput {
  create?: SaisonCreateWithoutEpisodesInput;
  update?: SaisonUpdateWithoutEpisodesDataInput;
  upsert?: SaisonUpsertWithoutEpisodesInput;
  connect?: SaisonWhereUniqueInput;
}

export interface SaisonUpdateWithoutEpisodesDataInput {
  number?: String;
  serie?: SerieUpdateOneRequiredWithoutSaisonsInput;
}

export interface SerieUpdateOneRequiredWithoutSaisonsInput {
  create?: SerieCreateWithoutSaisonsInput;
  update?: SerieUpdateWithoutSaisonsDataInput;
  upsert?: SerieUpsertWithoutSaisonsInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieUpdateWithoutSaisonsDataInput {
  name?: String;
  genre?: String;
  description?: String;
  nbEp?: String;
  nbSais?: String;
  episodes?: EpisodeUpdateManyWithoutSerieInput;
}

export interface EpisodeUpdateManyWithoutSerieInput {
  create?: EpisodeCreateWithoutSerieInput[] | EpisodeCreateWithoutSerieInput;
  delete?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  connect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  set?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  disconnect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  update?:
    | EpisodeUpdateWithWhereUniqueWithoutSerieInput[]
    | EpisodeUpdateWithWhereUniqueWithoutSerieInput;
  upsert?:
    | EpisodeUpsertWithWhereUniqueWithoutSerieInput[]
    | EpisodeUpsertWithWhereUniqueWithoutSerieInput;
  deleteMany?: EpisodeScalarWhereInput[] | EpisodeScalarWhereInput;
  updateMany?:
    | EpisodeUpdateManyWithWhereNestedInput[]
    | EpisodeUpdateManyWithWhereNestedInput;
}

export interface EpisodeUpdateWithWhereUniqueWithoutSerieInput {
  where: EpisodeWhereUniqueInput;
  data: EpisodeUpdateWithoutSerieDataInput;
}

export interface EpisodeUpdateWithoutSerieDataInput {
  name?: String;
  description?: String;
  saison?: SaisonUpdateOneRequiredWithoutEpisodesInput;
}

export interface EpisodeUpsertWithWhereUniqueWithoutSerieInput {
  where: EpisodeWhereUniqueInput;
  update: EpisodeUpdateWithoutSerieDataInput;
  create: EpisodeCreateWithoutSerieInput;
}

export interface EpisodeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: EpisodeScalarWhereInput[] | EpisodeScalarWhereInput;
  OR?: EpisodeScalarWhereInput[] | EpisodeScalarWhereInput;
  NOT?: EpisodeScalarWhereInput[] | EpisodeScalarWhereInput;
}

export interface EpisodeUpdateManyWithWhereNestedInput {
  where: EpisodeScalarWhereInput;
  data: EpisodeUpdateManyDataInput;
}

export interface EpisodeUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface SerieUpsertWithoutSaisonsInput {
  update: SerieUpdateWithoutSaisonsDataInput;
  create: SerieCreateWithoutSaisonsInput;
}

export interface SaisonUpsertWithoutEpisodesInput {
  update: SaisonUpdateWithoutEpisodesDataInput;
  create: SaisonCreateWithoutEpisodesInput;
}

export interface SerieUpdateOneRequiredWithoutEpisodesInput {
  create?: SerieCreateWithoutEpisodesInput;
  update?: SerieUpdateWithoutEpisodesDataInput;
  upsert?: SerieUpsertWithoutEpisodesInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieUpdateWithoutEpisodesDataInput {
  name?: String;
  genre?: String;
  description?: String;
  nbEp?: String;
  nbSais?: String;
  saisons?: SaisonUpdateManyWithoutSerieInput;
}

export interface SaisonUpdateManyWithoutSerieInput {
  create?: SaisonCreateWithoutSerieInput[] | SaisonCreateWithoutSerieInput;
  delete?: SaisonWhereUniqueInput[] | SaisonWhereUniqueInput;
  connect?: SaisonWhereUniqueInput[] | SaisonWhereUniqueInput;
  set?: SaisonWhereUniqueInput[] | SaisonWhereUniqueInput;
  disconnect?: SaisonWhereUniqueInput[] | SaisonWhereUniqueInput;
  update?:
    | SaisonUpdateWithWhereUniqueWithoutSerieInput[]
    | SaisonUpdateWithWhereUniqueWithoutSerieInput;
  upsert?:
    | SaisonUpsertWithWhereUniqueWithoutSerieInput[]
    | SaisonUpsertWithWhereUniqueWithoutSerieInput;
  deleteMany?: SaisonScalarWhereInput[] | SaisonScalarWhereInput;
  updateMany?:
    | SaisonUpdateManyWithWhereNestedInput[]
    | SaisonUpdateManyWithWhereNestedInput;
}

export interface SaisonUpdateWithWhereUniqueWithoutSerieInput {
  where: SaisonWhereUniqueInput;
  data: SaisonUpdateWithoutSerieDataInput;
}

export interface SaisonUpdateWithoutSerieDataInput {
  number?: String;
  episodes?: EpisodeUpdateManyWithoutSaisonInput;
}

export interface EpisodeUpdateManyWithoutSaisonInput {
  create?: EpisodeCreateWithoutSaisonInput[] | EpisodeCreateWithoutSaisonInput;
  delete?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  connect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  set?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  disconnect?: EpisodeWhereUniqueInput[] | EpisodeWhereUniqueInput;
  update?:
    | EpisodeUpdateWithWhereUniqueWithoutSaisonInput[]
    | EpisodeUpdateWithWhereUniqueWithoutSaisonInput;
  upsert?:
    | EpisodeUpsertWithWhereUniqueWithoutSaisonInput[]
    | EpisodeUpsertWithWhereUniqueWithoutSaisonInput;
  deleteMany?: EpisodeScalarWhereInput[] | EpisodeScalarWhereInput;
  updateMany?:
    | EpisodeUpdateManyWithWhereNestedInput[]
    | EpisodeUpdateManyWithWhereNestedInput;
}

export interface EpisodeUpdateWithWhereUniqueWithoutSaisonInput {
  where: EpisodeWhereUniqueInput;
  data: EpisodeUpdateWithoutSaisonDataInput;
}

export interface EpisodeUpdateWithoutSaisonDataInput {
  name?: String;
  description?: String;
  serie?: SerieUpdateOneRequiredWithoutEpisodesInput;
}

export interface EpisodeUpsertWithWhereUniqueWithoutSaisonInput {
  where: EpisodeWhereUniqueInput;
  update: EpisodeUpdateWithoutSaisonDataInput;
  create: EpisodeCreateWithoutSaisonInput;
}

export interface SaisonUpsertWithWhereUniqueWithoutSerieInput {
  where: SaisonWhereUniqueInput;
  update: SaisonUpdateWithoutSerieDataInput;
  create: SaisonCreateWithoutSerieInput;
}

export interface SaisonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  AND?: SaisonScalarWhereInput[] | SaisonScalarWhereInput;
  OR?: SaisonScalarWhereInput[] | SaisonScalarWhereInput;
  NOT?: SaisonScalarWhereInput[] | SaisonScalarWhereInput;
}

export interface SaisonUpdateManyWithWhereNestedInput {
  where: SaisonScalarWhereInput;
  data: SaisonUpdateManyDataInput;
}

export interface SaisonUpdateManyDataInput {
  number?: String;
}

export interface SerieUpsertWithoutEpisodesInput {
  update: SerieUpdateWithoutEpisodesDataInput;
  create: SerieCreateWithoutEpisodesInput;
}

export interface EpisodeUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface FilmCreateInput {
  name: String;
  genre: String;
  description: String;
  duration: String;
}

export interface FilmUpdateInput {
  name?: String;
  genre?: String;
  description?: String;
  duration?: String;
}

export interface FilmUpdateManyMutationInput {
  name?: String;
  genre?: String;
  description?: String;
  duration?: String;
}

export interface FilmUserCreateInput {
  finish?: Boolean;
  progress: String;
  film: FilmCreateOneInput;
  user: UserCreateOneWithoutFilmInput;
}

export interface FilmCreateOneInput {
  create?: FilmCreateInput;
  connect?: FilmWhereUniqueInput;
}

export interface UserCreateOneWithoutFilmInput {
  create?: UserCreateWithoutFilmInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutFilmInput {
  email: String;
  password: String;
  username: String;
  type: String;
  serie?: SerieUserCreateManyWithoutUserInput;
}

export interface SerieUserCreateManyWithoutUserInput {
  create?: SerieUserCreateWithoutUserInput[] | SerieUserCreateWithoutUserInput;
  connect?: SerieUserWhereUniqueInput[] | SerieUserWhereUniqueInput;
}

export interface SerieUserCreateWithoutUserInput {
  finish?: Boolean;
  serie: SerieCreateOneInput;
}

export interface SerieCreateOneInput {
  create?: SerieCreateInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieCreateInput {
  name: String;
  genre: String;
  description: String;
  nbEp: String;
  nbSais: String;
  saisons?: SaisonCreateManyWithoutSerieInput;
  episodes?: EpisodeCreateManyWithoutSerieInput;
}

export interface FilmUserUpdateInput {
  finish?: Boolean;
  progress?: String;
  film?: FilmUpdateOneRequiredInput;
  user?: UserUpdateOneRequiredWithoutFilmInput;
}

export interface FilmUpdateOneRequiredInput {
  create?: FilmCreateInput;
  update?: FilmUpdateDataInput;
  upsert?: FilmUpsertNestedInput;
  connect?: FilmWhereUniqueInput;
}

export interface FilmUpdateDataInput {
  name?: String;
  genre?: String;
  description?: String;
  duration?: String;
}

export interface FilmUpsertNestedInput {
  update: FilmUpdateDataInput;
  create: FilmCreateInput;
}

export interface UserUpdateOneRequiredWithoutFilmInput {
  create?: UserCreateWithoutFilmInput;
  update?: UserUpdateWithoutFilmDataInput;
  upsert?: UserUpsertWithoutFilmInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutFilmDataInput {
  email?: String;
  password?: String;
  username?: String;
  type?: String;
  serie?: SerieUserUpdateManyWithoutUserInput;
}

export interface SerieUserUpdateManyWithoutUserInput {
  create?: SerieUserCreateWithoutUserInput[] | SerieUserCreateWithoutUserInput;
  delete?: SerieUserWhereUniqueInput[] | SerieUserWhereUniqueInput;
  connect?: SerieUserWhereUniqueInput[] | SerieUserWhereUniqueInput;
  set?: SerieUserWhereUniqueInput[] | SerieUserWhereUniqueInput;
  disconnect?: SerieUserWhereUniqueInput[] | SerieUserWhereUniqueInput;
  update?:
    | SerieUserUpdateWithWhereUniqueWithoutUserInput[]
    | SerieUserUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | SerieUserUpsertWithWhereUniqueWithoutUserInput[]
    | SerieUserUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: SerieUserScalarWhereInput[] | SerieUserScalarWhereInput;
  updateMany?:
    | SerieUserUpdateManyWithWhereNestedInput[]
    | SerieUserUpdateManyWithWhereNestedInput;
}

export interface SerieUserUpdateWithWhereUniqueWithoutUserInput {
  where: SerieUserWhereUniqueInput;
  data: SerieUserUpdateWithoutUserDataInput;
}

export interface SerieUserUpdateWithoutUserDataInput {
  finish?: Boolean;
  serie?: SerieUpdateOneRequiredInput;
}

export interface SerieUpdateOneRequiredInput {
  create?: SerieCreateInput;
  update?: SerieUpdateDataInput;
  upsert?: SerieUpsertNestedInput;
  connect?: SerieWhereUniqueInput;
}

export interface SerieUpdateDataInput {
  name?: String;
  genre?: String;
  description?: String;
  nbEp?: String;
  nbSais?: String;
  saisons?: SaisonUpdateManyWithoutSerieInput;
  episodes?: EpisodeUpdateManyWithoutSerieInput;
}

export interface SerieUpsertNestedInput {
  update: SerieUpdateDataInput;
  create: SerieCreateInput;
}

export interface SerieUserUpsertWithWhereUniqueWithoutUserInput {
  where: SerieUserWhereUniqueInput;
  update: SerieUserUpdateWithoutUserDataInput;
  create: SerieUserCreateWithoutUserInput;
}

export interface SerieUserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  finish?: Boolean;
  finish_not?: Boolean;
  AND?: SerieUserScalarWhereInput[] | SerieUserScalarWhereInput;
  OR?: SerieUserScalarWhereInput[] | SerieUserScalarWhereInput;
  NOT?: SerieUserScalarWhereInput[] | SerieUserScalarWhereInput;
}

export interface SerieUserUpdateManyWithWhereNestedInput {
  where: SerieUserScalarWhereInput;
  data: SerieUserUpdateManyDataInput;
}

export interface SerieUserUpdateManyDataInput {
  finish?: Boolean;
}

export interface UserUpsertWithoutFilmInput {
  update: UserUpdateWithoutFilmDataInput;
  create: UserCreateWithoutFilmInput;
}

export interface FilmUserUpdateManyMutationInput {
  finish?: Boolean;
  progress?: String;
}

export interface SaisonCreateInput {
  number: String;
  serie: SerieCreateOneWithoutSaisonsInput;
  episodes?: EpisodeCreateManyWithoutSaisonInput;
}

export interface SaisonUpdateInput {
  number?: String;
  serie?: SerieUpdateOneRequiredWithoutSaisonsInput;
  episodes?: EpisodeUpdateManyWithoutSaisonInput;
}

export interface SaisonUpdateManyMutationInput {
  number?: String;
}

export interface SerieUpdateInput {
  name?: String;
  genre?: String;
  description?: String;
  nbEp?: String;
  nbSais?: String;
  saisons?: SaisonUpdateManyWithoutSerieInput;
  episodes?: EpisodeUpdateManyWithoutSerieInput;
}

export interface SerieUpdateManyMutationInput {
  name?: String;
  genre?: String;
  description?: String;
  nbEp?: String;
  nbSais?: String;
}

export interface SerieUserCreateInput {
  finish?: Boolean;
  serie: SerieCreateOneInput;
  user: UserCreateOneWithoutSerieInput;
}

export interface UserCreateOneWithoutSerieInput {
  create?: UserCreateWithoutSerieInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutSerieInput {
  email: String;
  password: String;
  username: String;
  type: String;
  film?: FilmUserCreateManyWithoutUserInput;
}

export interface FilmUserCreateManyWithoutUserInput {
  create?: FilmUserCreateWithoutUserInput[] | FilmUserCreateWithoutUserInput;
  connect?: FilmUserWhereUniqueInput[] | FilmUserWhereUniqueInput;
}

export interface FilmUserCreateWithoutUserInput {
  finish?: Boolean;
  progress: String;
  film: FilmCreateOneInput;
}

export interface SerieUserUpdateInput {
  finish?: Boolean;
  serie?: SerieUpdateOneRequiredInput;
  user?: UserUpdateOneRequiredWithoutSerieInput;
}

export interface UserUpdateOneRequiredWithoutSerieInput {
  create?: UserCreateWithoutSerieInput;
  update?: UserUpdateWithoutSerieDataInput;
  upsert?: UserUpsertWithoutSerieInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutSerieDataInput {
  email?: String;
  password?: String;
  username?: String;
  type?: String;
  film?: FilmUserUpdateManyWithoutUserInput;
}

export interface FilmUserUpdateManyWithoutUserInput {
  create?: FilmUserCreateWithoutUserInput[] | FilmUserCreateWithoutUserInput;
  delete?: FilmUserWhereUniqueInput[] | FilmUserWhereUniqueInput;
  connect?: FilmUserWhereUniqueInput[] | FilmUserWhereUniqueInput;
  set?: FilmUserWhereUniqueInput[] | FilmUserWhereUniqueInput;
  disconnect?: FilmUserWhereUniqueInput[] | FilmUserWhereUniqueInput;
  update?:
    | FilmUserUpdateWithWhereUniqueWithoutUserInput[]
    | FilmUserUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | FilmUserUpsertWithWhereUniqueWithoutUserInput[]
    | FilmUserUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: FilmUserScalarWhereInput[] | FilmUserScalarWhereInput;
  updateMany?:
    | FilmUserUpdateManyWithWhereNestedInput[]
    | FilmUserUpdateManyWithWhereNestedInput;
}

export interface FilmUserUpdateWithWhereUniqueWithoutUserInput {
  where: FilmUserWhereUniqueInput;
  data: FilmUserUpdateWithoutUserDataInput;
}

export interface FilmUserUpdateWithoutUserDataInput {
  finish?: Boolean;
  progress?: String;
  film?: FilmUpdateOneRequiredInput;
}

export interface FilmUserUpsertWithWhereUniqueWithoutUserInput {
  where: FilmUserWhereUniqueInput;
  update: FilmUserUpdateWithoutUserDataInput;
  create: FilmUserCreateWithoutUserInput;
}

export interface FilmUserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  finish?: Boolean;
  finish_not?: Boolean;
  progress?: String;
  progress_not?: String;
  progress_in?: String[] | String;
  progress_not_in?: String[] | String;
  progress_lt?: String;
  progress_lte?: String;
  progress_gt?: String;
  progress_gte?: String;
  progress_contains?: String;
  progress_not_contains?: String;
  progress_starts_with?: String;
  progress_not_starts_with?: String;
  progress_ends_with?: String;
  progress_not_ends_with?: String;
  AND?: FilmUserScalarWhereInput[] | FilmUserScalarWhereInput;
  OR?: FilmUserScalarWhereInput[] | FilmUserScalarWhereInput;
  NOT?: FilmUserScalarWhereInput[] | FilmUserScalarWhereInput;
}

export interface FilmUserUpdateManyWithWhereNestedInput {
  where: FilmUserScalarWhereInput;
  data: FilmUserUpdateManyDataInput;
}

export interface FilmUserUpdateManyDataInput {
  finish?: Boolean;
  progress?: String;
}

export interface UserUpsertWithoutSerieInput {
  update: UserUpdateWithoutSerieDataInput;
  create: UserCreateWithoutSerieInput;
}

export interface SerieUserUpdateManyMutationInput {
  finish?: Boolean;
}

export interface UserCreateInput {
  email: String;
  password: String;
  username: String;
  type: String;
  serie?: SerieUserCreateManyWithoutUserInput;
  film?: FilmUserCreateManyWithoutUserInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  username?: String;
  type?: String;
  serie?: SerieUserUpdateManyWithoutUserInput;
  film?: FilmUserUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  username?: String;
  type?: String;
}

export interface EpisodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EpisodeWhereInput;
  AND?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
  OR?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
  NOT?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
}

export interface FilmSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FilmWhereInput;
  AND?: FilmSubscriptionWhereInput[] | FilmSubscriptionWhereInput;
  OR?: FilmSubscriptionWhereInput[] | FilmSubscriptionWhereInput;
  NOT?: FilmSubscriptionWhereInput[] | FilmSubscriptionWhereInput;
}

export interface FilmUserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FilmUserWhereInput;
  AND?: FilmUserSubscriptionWhereInput[] | FilmUserSubscriptionWhereInput;
  OR?: FilmUserSubscriptionWhereInput[] | FilmUserSubscriptionWhereInput;
  NOT?: FilmUserSubscriptionWhereInput[] | FilmUserSubscriptionWhereInput;
}

export interface SaisonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SaisonWhereInput;
  AND?: SaisonSubscriptionWhereInput[] | SaisonSubscriptionWhereInput;
  OR?: SaisonSubscriptionWhereInput[] | SaisonSubscriptionWhereInput;
  NOT?: SaisonSubscriptionWhereInput[] | SaisonSubscriptionWhereInput;
}

export interface SerieSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SerieWhereInput;
  AND?: SerieSubscriptionWhereInput[] | SerieSubscriptionWhereInput;
  OR?: SerieSubscriptionWhereInput[] | SerieSubscriptionWhereInput;
  NOT?: SerieSubscriptionWhereInput[] | SerieSubscriptionWhereInput;
}

export interface SerieUserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SerieUserWhereInput;
  AND?: SerieUserSubscriptionWhereInput[] | SerieUserSubscriptionWhereInput;
  OR?: SerieUserSubscriptionWhereInput[] | SerieUserSubscriptionWhereInput;
  NOT?: SerieUserSubscriptionWhereInput[] | SerieUserSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Episode {
  id: ID_Output;
  name: String;
  description: String;
}

export interface EpisodePromise extends Promise<Episode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  saison: <T = SaisonPromise>() => T;
  serie: <T = SeriePromise>() => T;
}

export interface EpisodeSubscription
  extends Promise<AsyncIterator<Episode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  saison: <T = SaisonSubscription>() => T;
  serie: <T = SerieSubscription>() => T;
}

export interface Saison {
  id: ID_Output;
  number: String;
}

export interface SaisonPromise extends Promise<Saison>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  serie: <T = SeriePromise>() => T;
  episodes: <T = FragmentableArray<Episode>>(
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SaisonSubscription
  extends Promise<AsyncIterator<Saison>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  serie: <T = SerieSubscription>() => T;
  episodes: <T = Promise<AsyncIterator<EpisodeSubscription>>>(
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Serie {
  id: ID_Output;
  name: String;
  genre: String;
  description: String;
  nbEp: String;
  nbSais: String;
}

export interface SeriePromise extends Promise<Serie>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  genre: () => Promise<String>;
  description: () => Promise<String>;
  nbEp: () => Promise<String>;
  nbSais: () => Promise<String>;
  saisons: <T = FragmentableArray<Saison>>(
    args?: {
      where?: SaisonWhereInput;
      orderBy?: SaisonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  episodes: <T = FragmentableArray<Episode>>(
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SerieSubscription
  extends Promise<AsyncIterator<Serie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  nbEp: () => Promise<AsyncIterator<String>>;
  nbSais: () => Promise<AsyncIterator<String>>;
  saisons: <T = Promise<AsyncIterator<SaisonSubscription>>>(
    args?: {
      where?: SaisonWhereInput;
      orderBy?: SaisonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  episodes: <T = Promise<AsyncIterator<EpisodeSubscription>>>(
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EpisodeConnection {
  pageInfo: PageInfo;
  edges: EpisodeEdge[];
}

export interface EpisodeConnectionPromise
  extends Promise<EpisodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EpisodeEdge>>() => T;
  aggregate: <T = AggregateEpisodePromise>() => T;
}

export interface EpisodeConnectionSubscription
  extends Promise<AsyncIterator<EpisodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EpisodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEpisodeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EpisodeEdge {
  node: Episode;
  cursor: String;
}

export interface EpisodeEdgePromise extends Promise<EpisodeEdge>, Fragmentable {
  node: <T = EpisodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EpisodeEdgeSubscription
  extends Promise<AsyncIterator<EpisodeEdge>>,
    Fragmentable {
  node: <T = EpisodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEpisode {
  count: Int;
}

export interface AggregateEpisodePromise
  extends Promise<AggregateEpisode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEpisodeSubscription
  extends Promise<AsyncIterator<AggregateEpisode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Film {
  id: ID_Output;
  name: String;
  genre: String;
  description: String;
  duration: String;
}

export interface FilmPromise extends Promise<Film>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  genre: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<String>;
}

export interface FilmSubscription
  extends Promise<AsyncIterator<Film>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
}

export interface FilmConnection {
  pageInfo: PageInfo;
  edges: FilmEdge[];
}

export interface FilmConnectionPromise
  extends Promise<FilmConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FilmEdge>>() => T;
  aggregate: <T = AggregateFilmPromise>() => T;
}

export interface FilmConnectionSubscription
  extends Promise<AsyncIterator<FilmConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FilmEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFilmSubscription>() => T;
}

export interface FilmEdge {
  node: Film;
  cursor: String;
}

export interface FilmEdgePromise extends Promise<FilmEdge>, Fragmentable {
  node: <T = FilmPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FilmEdgeSubscription
  extends Promise<AsyncIterator<FilmEdge>>,
    Fragmentable {
  node: <T = FilmSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFilm {
  count: Int;
}

export interface AggregateFilmPromise
  extends Promise<AggregateFilm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFilmSubscription
  extends Promise<AsyncIterator<AggregateFilm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FilmUser {
  id: ID_Output;
  finish?: Boolean;
  progress: String;
}

export interface FilmUserPromise extends Promise<FilmUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  finish: () => Promise<Boolean>;
  progress: () => Promise<String>;
  film: <T = FilmPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface FilmUserSubscription
  extends Promise<AsyncIterator<FilmUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
  progress: () => Promise<AsyncIterator<String>>;
  film: <T = FilmSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  username: String;
  type: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  type: () => Promise<String>;
  serie: <T = FragmentableArray<SerieUser>>(
    args?: {
      where?: SerieUserWhereInput;
      orderBy?: SerieUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  film: <T = FragmentableArray<FilmUser>>(
    args?: {
      where?: FilmUserWhereInput;
      orderBy?: FilmUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  serie: <T = Promise<AsyncIterator<SerieUserSubscription>>>(
    args?: {
      where?: SerieUserWhereInput;
      orderBy?: SerieUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  film: <T = Promise<AsyncIterator<FilmUserSubscription>>>(
    args?: {
      where?: FilmUserWhereInput;
      orderBy?: FilmUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SerieUser {
  id: ID_Output;
  finish?: Boolean;
}

export interface SerieUserPromise extends Promise<SerieUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  finish: () => Promise<Boolean>;
  serie: <T = SeriePromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface SerieUserSubscription
  extends Promise<AsyncIterator<SerieUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
  serie: <T = SerieSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface FilmUserConnection {
  pageInfo: PageInfo;
  edges: FilmUserEdge[];
}

export interface FilmUserConnectionPromise
  extends Promise<FilmUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FilmUserEdge>>() => T;
  aggregate: <T = AggregateFilmUserPromise>() => T;
}

export interface FilmUserConnectionSubscription
  extends Promise<AsyncIterator<FilmUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FilmUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFilmUserSubscription>() => T;
}

export interface FilmUserEdge {
  node: FilmUser;
  cursor: String;
}

export interface FilmUserEdgePromise
  extends Promise<FilmUserEdge>,
    Fragmentable {
  node: <T = FilmUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FilmUserEdgeSubscription
  extends Promise<AsyncIterator<FilmUserEdge>>,
    Fragmentable {
  node: <T = FilmUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFilmUser {
  count: Int;
}

export interface AggregateFilmUserPromise
  extends Promise<AggregateFilmUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFilmUserSubscription
  extends Promise<AsyncIterator<AggregateFilmUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaisonConnection {
  pageInfo: PageInfo;
  edges: SaisonEdge[];
}

export interface SaisonConnectionPromise
  extends Promise<SaisonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaisonEdge>>() => T;
  aggregate: <T = AggregateSaisonPromise>() => T;
}

export interface SaisonConnectionSubscription
  extends Promise<AsyncIterator<SaisonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaisonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaisonSubscription>() => T;
}

export interface SaisonEdge {
  node: Saison;
  cursor: String;
}

export interface SaisonEdgePromise extends Promise<SaisonEdge>, Fragmentable {
  node: <T = SaisonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaisonEdgeSubscription
  extends Promise<AsyncIterator<SaisonEdge>>,
    Fragmentable {
  node: <T = SaisonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaison {
  count: Int;
}

export interface AggregateSaisonPromise
  extends Promise<AggregateSaison>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaisonSubscription
  extends Promise<AsyncIterator<AggregateSaison>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SerieConnection {
  pageInfo: PageInfo;
  edges: SerieEdge[];
}

export interface SerieConnectionPromise
  extends Promise<SerieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SerieEdge>>() => T;
  aggregate: <T = AggregateSeriePromise>() => T;
}

export interface SerieConnectionSubscription
  extends Promise<AsyncIterator<SerieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SerieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSerieSubscription>() => T;
}

export interface SerieEdge {
  node: Serie;
  cursor: String;
}

export interface SerieEdgePromise extends Promise<SerieEdge>, Fragmentable {
  node: <T = SeriePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SerieEdgeSubscription
  extends Promise<AsyncIterator<SerieEdge>>,
    Fragmentable {
  node: <T = SerieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSerie {
  count: Int;
}

export interface AggregateSeriePromise
  extends Promise<AggregateSerie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSerieSubscription
  extends Promise<AsyncIterator<AggregateSerie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SerieUserConnection {
  pageInfo: PageInfo;
  edges: SerieUserEdge[];
}

export interface SerieUserConnectionPromise
  extends Promise<SerieUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SerieUserEdge>>() => T;
  aggregate: <T = AggregateSerieUserPromise>() => T;
}

export interface SerieUserConnectionSubscription
  extends Promise<AsyncIterator<SerieUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SerieUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSerieUserSubscription>() => T;
}

export interface SerieUserEdge {
  node: SerieUser;
  cursor: String;
}

export interface SerieUserEdgePromise
  extends Promise<SerieUserEdge>,
    Fragmentable {
  node: <T = SerieUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SerieUserEdgeSubscription
  extends Promise<AsyncIterator<SerieUserEdge>>,
    Fragmentable {
  node: <T = SerieUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSerieUser {
  count: Int;
}

export interface AggregateSerieUserPromise
  extends Promise<AggregateSerieUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSerieUserSubscription
  extends Promise<AsyncIterator<AggregateSerieUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EpisodeSubscriptionPayload {
  mutation: MutationType;
  node: Episode;
  updatedFields: String[];
  previousValues: EpisodePreviousValues;
}

export interface EpisodeSubscriptionPayloadPromise
  extends Promise<EpisodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EpisodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EpisodePreviousValuesPromise>() => T;
}

export interface EpisodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EpisodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EpisodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EpisodePreviousValuesSubscription>() => T;
}

export interface EpisodePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface EpisodePreviousValuesPromise
  extends Promise<EpisodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface EpisodePreviousValuesSubscription
  extends Promise<AsyncIterator<EpisodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface FilmSubscriptionPayload {
  mutation: MutationType;
  node: Film;
  updatedFields: String[];
  previousValues: FilmPreviousValues;
}

export interface FilmSubscriptionPayloadPromise
  extends Promise<FilmSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilmPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilmPreviousValuesPromise>() => T;
}

export interface FilmSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FilmSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FilmSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilmPreviousValuesSubscription>() => T;
}

export interface FilmPreviousValues {
  id: ID_Output;
  name: String;
  genre: String;
  description: String;
  duration: String;
}

export interface FilmPreviousValuesPromise
  extends Promise<FilmPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  genre: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<String>;
}

export interface FilmPreviousValuesSubscription
  extends Promise<AsyncIterator<FilmPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
}

export interface FilmUserSubscriptionPayload {
  mutation: MutationType;
  node: FilmUser;
  updatedFields: String[];
  previousValues: FilmUserPreviousValues;
}

export interface FilmUserSubscriptionPayloadPromise
  extends Promise<FilmUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilmUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilmUserPreviousValuesPromise>() => T;
}

export interface FilmUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FilmUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FilmUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilmUserPreviousValuesSubscription>() => T;
}

export interface FilmUserPreviousValues {
  id: ID_Output;
  finish?: Boolean;
  progress: String;
}

export interface FilmUserPreviousValuesPromise
  extends Promise<FilmUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  finish: () => Promise<Boolean>;
  progress: () => Promise<String>;
}

export interface FilmUserPreviousValuesSubscription
  extends Promise<AsyncIterator<FilmUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
  progress: () => Promise<AsyncIterator<String>>;
}

export interface SaisonSubscriptionPayload {
  mutation: MutationType;
  node: Saison;
  updatedFields: String[];
  previousValues: SaisonPreviousValues;
}

export interface SaisonSubscriptionPayloadPromise
  extends Promise<SaisonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaisonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaisonPreviousValuesPromise>() => T;
}

export interface SaisonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaisonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaisonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaisonPreviousValuesSubscription>() => T;
}

export interface SaisonPreviousValues {
  id: ID_Output;
  number: String;
}

export interface SaisonPreviousValuesPromise
  extends Promise<SaisonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
}

export interface SaisonPreviousValuesSubscription
  extends Promise<AsyncIterator<SaisonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
}

export interface SerieSubscriptionPayload {
  mutation: MutationType;
  node: Serie;
  updatedFields: String[];
  previousValues: SeriePreviousValues;
}

export interface SerieSubscriptionPayloadPromise
  extends Promise<SerieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeriePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeriePreviousValuesPromise>() => T;
}

export interface SerieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SerieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SerieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeriePreviousValuesSubscription>() => T;
}

export interface SeriePreviousValues {
  id: ID_Output;
  name: String;
  genre: String;
  description: String;
  nbEp: String;
  nbSais: String;
}

export interface SeriePreviousValuesPromise
  extends Promise<SeriePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  genre: () => Promise<String>;
  description: () => Promise<String>;
  nbEp: () => Promise<String>;
  nbSais: () => Promise<String>;
}

export interface SeriePreviousValuesSubscription
  extends Promise<AsyncIterator<SeriePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  nbEp: () => Promise<AsyncIterator<String>>;
  nbSais: () => Promise<AsyncIterator<String>>;
}

export interface SerieUserSubscriptionPayload {
  mutation: MutationType;
  node: SerieUser;
  updatedFields: String[];
  previousValues: SerieUserPreviousValues;
}

export interface SerieUserSubscriptionPayloadPromise
  extends Promise<SerieUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SerieUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SerieUserPreviousValuesPromise>() => T;
}

export interface SerieUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SerieUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SerieUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SerieUserPreviousValuesSubscription>() => T;
}

export interface SerieUserPreviousValues {
  id: ID_Output;
  finish?: Boolean;
}

export interface SerieUserPreviousValuesPromise
  extends Promise<SerieUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  finish: () => Promise<Boolean>;
}

export interface SerieUserPreviousValuesSubscription
  extends Promise<AsyncIterator<SerieUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  username: String;
  type: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  type: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Serie",
    embedded: false
  },
  {
    name: "Saison",
    embedded: false
  },
  {
    name: "Episode",
    embedded: false
  },
  {
    name: "Film",
    embedded: false
  },
  {
    name: "FilmUser",
    embedded: false
  },
  {
    name: "SerieUser",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
